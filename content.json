[{"title":"Scrapy Tutorial 1: overview","date":"2018-07-15T21:02:27.662Z","path":"2018/07/15/Scrapy1/","text":"About Scrapy Scrapy is a free and open source web crawling framework , written in Python. Originally designed for web scraping, it can also be used to extract data using API. or as a general purpose web crawler. It is currently maintained by Scrapinghub Ltd. , a web scraping development and services company. Architecture OverviewData FlowThe following diagram shows an overview of the Scrapy architecture with its components and and outline of data flow (red arrows).The data flow is controlled by the execution engine and goes like this (as indicated by the red arrow): The Engine gets the initial Requests to crawl from the Spiders. The Engine schedules the Requests in the Scheduler and ask for the next Requests to crawl. The Scheduler sends back the next Requests to the Engine. The Engine send the Requests to the Downloader through the Downloader Middlewares (see process_request()). Once the Downloader finishes the downloading it generates a Response and sends it back to Engine through the Downloader Middlewares (see process_response()). The Engine sends the received Response to the Spiders for processing through the Spider Middleware (see process_spider_input()). The Spiders processes the Response and returns the scraped Items and new Requests (to follow) to the Engine through the Spider Middleware (see process_spider_output()). The Engine sends the scraped Items to Item Pipelines, then send the processed Requests to the Scheduler and ask for the next possible Requests to crawl. The process repeats (from step 1) until there are no more requests from the Spiders.ComponentsScrapy Engine The engine controls the data flow between all components and triggers events when certain action occurs. See Data Flow for more details. Scheduler The Scheduler receives the request from the engine and enqueues them for feeding them back to engine later when requested. Downloader The Downloader is responsible for fetching web pages from the Internet and feeding them back to the engine. Spiders Spiders are custom classes written by the user to parse responses and extract scraped items from them or additional requests to follow. Each spider is used for one (or a series of) specific webpage. Item Pipelines The Item Pipelines is responsible for processing the extracted items from the spiders. Typical tasks include cleansing, validation and persistence (like stoing the item in a database) Downloader Middleware Downloader Middleware is a specific hook between the Engine the the Downloader and processes requests when pass from the Engine to the Downloader and responses that pass from Downloader to the Engine. It provides a simple mechanism to extend Scrapy by inserting user defined code, like automatic replace user-agent, IP, etc. Spider Middleware Spider Middleware is a specific hook between the Engine and the Spider and processes spider input (response) and output (items and request). It also provides a simple mechanism to extend Scrapy functions by using user-defined code."},{"title":"Hello World","date":"2018-07-14T03:49:54.288Z","path":"2018/07/13/hello-world_new/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post$ hexo new &quot;My New Post&quot; More info: Writing Run server$ hexo server More info: Server Generate static files$ hexo generate More info: Generating Deploy to remote sites$ hexo deploy More info: Deployment"}]